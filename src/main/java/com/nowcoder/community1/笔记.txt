
  如何理解MVC
  M : Model(模型) 代表应用程序的数据逻辑核心。 它直接管理数据，逻辑和规则，通常负责访问数据库，执行数据操作和处理业务逻辑, 它独立于用户界面,不直接涉及任何关于数据展示的逻辑
  V : View(视图) 代表应用程序的用户界面部分。 通常只展示数据展现的逻辑,不包含业务逻辑, 只显示用户需要的数据,而不需要知道这些数据是如何创建和维护的
  C : Controller(控制器) 代表模型和视图直接的协调者, 它接受用户的输入, 并调用模型对象和视图对象执行所需的动作, MVC中, 控制器接受所有用户的输入, 然后根据输入指令模型和视图进行相应的更新

  MVC的工作流程
  用户操作 -> 控制器 -> 模型 -> 视图 -> 用户界面


  MVC在Web应用程序中经常与前后端技术栈结合使用
  例如: 一个SpringMVC应用程序会使用:
  Model: Java 对象, 通常表示数据并可以持久化到数据库
  View: 通常是 JSP 或 其它模板引擎 (如Thymeleaf) 生成的HTML页面, 也可以是返回给客户端的 JSON / XML 数据
  Controller: 一组Spring框架的控制器, 它们使用@Controller注解或者它的派生注解, 如@RestController

  MVC模式的主要优点在于促进了关注点分离, 这样可以更容易的维护和扩展应用程序. 因为每个组件都有明确的职责, 所以开发者可以专注于他们的特定任务, 并且更改一个组件不太可能影响别的组件
